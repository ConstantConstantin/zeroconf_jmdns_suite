/**
@page avahiGuide Avahi

\section Overview

These are some notes re development with libavahi.

\section Links

 - http://www.avahi.org/wiki/ArchitecturalOverview - overview of all the components
 - http://avahi.sourcearchive.com/documentation/0.6.30-5/main.html - documentation
 - http://avahi.org/wiki/RunningAvahiClientAsThread - put it in its own event thread.
 - http://lists.freedesktop.org/archives/avahi/2010-October/001944.html - reason for entry groups.

\section Threads

\subsection C++

Avahi expects all interactions from inside its own thread. If you are interacting with it from outside, 
with your own custom implementation (not using a dbus or qt event loop), you need to implement the 
new multi-threaded poll.

\section entrygroups Entry Groups

See the email above re entry groups. In plainer english:

Entry groups are a way to atomicize the advertising of a single service on multiple services types.
For example, a printer with the name 'Officejet Pro 8500' will usually offer itself on at
least the PDL and UNIX printer service types, if not more. If each of these services types were
added individually, there'd be a chance of a race condition and the second addition would collide,
resulting in a different name to the first.

To prevent that, avahi lets you add multiple services to an entry group before committing them to
the avahi daemon where it can be ensured that no race condition can interfere with the creation of
the services.

Once committed, you cannot add more services to the entry group (you'll get a bad state error).

Conclusion: for each different service you make (not service type), use a new entry group.

\section Python

At the moment I've only been able to publish services before I start the python dbus event loop.
Adding services while the event loop is running is possible (so I've read), but I don't know where to
start with this yet.

\section Embedded

Avahi comes with libavahi-core which removes the dependancy on dbus. I haven't tested this yet.

*/
